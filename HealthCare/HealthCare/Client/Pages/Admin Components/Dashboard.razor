@page "/admin/dashboard"
@layout AdminLayout
@using HealthCare.Shared.Objects;
@using HealthCare.Shared.Interfaces
@using System.Net.Http
@inject HttpClient httpClient
@using Newtonsoft.Json;
@using HealthCare.Shared.Models;



<h1>Admin Dashboard</h1>

@if (showMetrics)
{
    <h2>System Metrics</h2>
    <p>CPU usage: @cpuUsage</p>
    <p>Memory usage: @memoryUsage</p>
}

@if (showActivityLog)
{
    <h2>User Activity Log</h2>
    <table>
        <thead>
            <tr>
                <th>User</th>
                <th>Action</th>
                <th>Timestamp</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var log in activityLog)
            {
                <tr>
                    <td>@log.Username</td>
                    <td>logged in</td>
                    <td>@log.LastLogin</td>
                </tr>
            }
        </tbody>
    </table>
}

<button @onclick="ToggleMetrics">Toggle Metrics</button>
<button @onclick="ToggleActivityLog">Toggle Activity Log</button>

@code {
    private bool showMetrics = false;
    private bool showActivityLog = false;
    private double cpuUsage = 0.0;
    private double memoryUsage = 0.0;
    private List<User> activityLog = new List<User>();
    private DateTime lastLogin;

    //private async Task UpdateSystemMetricsAsync()
    //{
    //    cpuUsage = await SystemMetricsService.GetCpuUsageAsync();
    //    memoryUsage = await SystemMetricsService.GetMemoryUsageAsync();
    //}


    private void ToggleMetrics()
    {
        showMetrics = !showMetrics;
    }

    private void ToggleActivityLog()
    {
        showActivityLog = !showActivityLog;
    }

    // Simulate getting system metrics and activity log entries
    protected override async Task OnInitializedAsync()
    {
        await GetLastLogins();
        await GetSystemMetrics();
        StateHasChanged();
    }
    // Get last login from the API
    async Task GetLastLogins()
    {
        var response = await httpClient.GetAsync("api/user/lastlogin");
        if (response.IsSuccessStatusCode)
        {
            activityLog = await response.Content.ReadFromJsonAsync<List<User>>();

        }
    }
    async Task GetSystemMetrics ()
    {
        var response = await httpClient.GetAsync("api/systemmetrics");
        if (response.IsSuccessStatusCode)
        {
            var metrics = await response.Content.ReadFromJsonAsync<SystemMetrics>();
            cpuUsage = metrics.cpuUsage;
            memoryUsage = metrics.memoryUsage;
        }
    }


    // Class to represent an activity log entry
    private class ActivityLogEntry
    {
        public string User { get; set; }
        public string Action { get; set; }
        public DateTime Timestamp { get; set; }

        public ActivityLogEntry(string user, string action, DateTime timestamp)
        {
            User = user;
            Action = action;
            Timestamp = timestamp;
        }
    }
    }
