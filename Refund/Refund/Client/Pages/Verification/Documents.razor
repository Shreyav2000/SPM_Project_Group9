@page "/support/{documents}/{elements}/{documentTypes}/{route}/{frequencies}/{units}/{checks}"
@inject HttpClient Http
@using KNUST_Medical_Refund.Shared.Models
@inject DialogService dialogService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager
@inject TooltipService tooltipService
@inject NotificationService notificationService
@inject IJSRuntime JS
@using Newtonsoft.Json
@using RestSharp
@using Faso.Blazor.SpinKit
@inject SpinnerService SpinnerService

<div Style="margin-bottom: 20px;">
    @if (documents.Count > 1)
    {
        <div class="d-sm-flex justify-content-between align-items-center mb-4">
            <RadzenButton Click="@previousDocument" Text="Previous" Style="margin-bottom: 10px; width: 150px;background-color:#007bff;" />
            <p style="color:#003445;"> <b>@(selectedIndex + 1)</b>  out of <b>@documents.Count</b> documents </p>
            <RadzenButton Click="@nextDocument" Text="Next" Style="margin-bottom: 10px; width: 150px;background-color:#079737;" />
        </div>
    }
    <RadzenCard>
        <div class="row">
            <div class="col-md-6">
                <h6> Document Details (AS entered by claimant)</h6>
                <hr />

                <div>Institution Name:</div>
                <b>
                    @{
                        institution = documents[selectedIndex].companyName;
                        @institution
                    }
                </b>
                <div>Document Type :</div>
                <b>
                    @{
                        documentType = documents[selectedIndex].documentType;
                        @documentType
                    }
                </b>
                @if (!String.IsNullOrEmpty(documents[selectedIndex].documentID))
                {
                    <div>Document ID:</div>
                    <b>
                        @{
                            documentID = documents[selectedIndex].documentID;
                            @documentID
                        }
                    </b>
                }
                @if (documents[selectedIndex].amount.HasValue)
                {
                    <div>Amount :</div>
                    <b>
                        @{
                            amount = documents[selectedIndex].amount.ToString();
                            @("GH¢ " + amount)
                        }
                    </b>
                }
                <div>Date Issue:</div>
                <b>
                    @{
                        documentDate = documents[selectedIndex].date.ToString("yyyy-MM-dd");
                        @DateTime.Parse(documentDate).ToLongDateString()
                    }
                </b>
                <div>Client's Name:</div>
                <b>
                    @{
                        recipientName = documents[selectedIndex].clientName;
                        @recipientName
                    }
                </b>
                <br />
                <hr />
                <div style="height:30px;background-color:#003445;padding:20px;color:white;margin-top:10px;">
                    <h6> Advisor</h6>
                </div>
                <RadzenCard Style="width:100%; height:300px;overflow: auto;">
                    @if (IsVisible)
                    {
                        <div class="spinner-container">
                            <SpinKitCircle />
                        </div>
                    }
                    @for (int i = 1; i <= events.Count; i++)
                    {
                        <p>@(i.ToString() + ") " + events[i - 1])</p>
                        <br />
                    }
                </RadzenCard>
            </div>
            <div class="col-md-6">
                <div class="row" style="display:flex;justify-content:space-between;">
                    <h6> Document (AS uploaded by claimant)</h6>
                    @if (documents[selectedIndex].documentType == "Prescription Form")
                    {
                        <div style="display:flex;justify-content:center;">
                            <RadzenButton Text="Show Transcribed Prescription" Style="background-color:#003445;" Click="showTranscription" />
                        </div>
                    }
                </div>
                <hr />
                @{
                    string image = "api/imagepuller/filter?filename=" + documents[selectedIndex].attachment;
                    <RadzenCard Style="width:100%;height:80%;">
                        <RadzenImage Path="@image" Click="@(() => ShowInlineDialog(image))" Style="max-width: 100%; max-height: 100%;cursor:pointer;"> </RadzenImage>
                    </RadzenCard>
                }

            </div>
        </div>
    </RadzenCard>
    <div class="row">
        <div class="col-md-4">
            <RadzenFieldset Text="Document Summary " Style="margin-top:50px;">
                <div>Institution Name:</div>
                <b>
                    @{
                        institution = documents[selectedIndex].companyName;
                        @institution
                    }
                </b>
                <div>Document Type :</div>
                <b>
                    @{
                        documentType = documents[selectedIndex].documentType;
                        @documentType
                    }
                </b>
                @if (!String.IsNullOrEmpty(documents[selectedIndex].documentID))
                {
                    <div>Document ID:</div>
                    <b>
                        @{
                            documentID = documents[selectedIndex].documentID;
                            @documentID
                        }
                    </b>
                }
                @if (documents[selectedIndex].amount.HasValue)
                {
                    <div>Amount :</div>
                    <b>
                        @{
                            amount = documents[selectedIndex].amount.ToString();
                            @("GH¢ " + amount)
                        }
                    </b>
                }
                <div>Date Issue:</div>
                <b>
                    @{
                        documentDate = documents[selectedIndex].date.ToString("yyyy-MM-dd");
                        @DateTime.Parse(documentDate).ToLongDateString()
                    }
                </b>
                <div>Client's Name:</div>
                <b>
                    @{
                        recipientName = documents[selectedIndex].clientName;
                        @recipientName
                    }
                </b>
                <br />
            </RadzenFieldset>
        </div>
        <div class="col-md-8">
            <RadzenFieldset Text="Official Use" Style="margin-top:50px;">
                <div class="row">
                    <div class="align-items-center d-flex col-md-4">
                        <RadzenLabel Text="Document Type" />
                    </div>
                    <div class="col-md-8">
                        <RadzenRadioButtonList @bind-Value=@nullableValue TValue="string" Change="selectDocumentType">
                            <Items>
                                @foreach (DocumentType doc in documentTypes)
                                {
                                    <RadzenRadioButtonListItem Text="@doc.TypeName" Value="@doc.TypeCode" />
                                }
                            </Items>
                        </RadzenRadioButtonList>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="align-items-center d-flex col-md-4">
                        <RadzenLabel Text="Drugs / Investigation :" />
                    </div>
                    <div class="col-md-8" style="margin-top:10px;">
                        <RadzenRadioButtonList @bind-Value=@nhiscovered TValue="bool">
                            <Items>
                                <RadzenRadioButtonListItem Text="NHIS Covered" Value="true" />
                                <RadzenRadioButtonListItem Text="NHIS Not Covered" Value="false" />
                            </Items>
                        </RadzenRadioButtonList>
                    </div>
                </div>
                <div class="row">
                    <div class="align-items-center d-flex col-md-4">
                        <RadzenLabel Text="Date on document" />
                    </div>
                    <div class="col-md-6">
                        <RadzenDatePicker style="width: 300px;" DateFormat="dddd, dd MMMM yyyy" @bind-Value="dateOndocument" />
                    </div>
                </div>
                @if (nullableValue == "RRT0")
                {
                    <div class="row" style="margin-bottom:10px;">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Cost Comparable with market price :" />
                        </div>
                        <div class="col-md-4">
                            <RadzenRadioButtonList @bind-Value=@marketPrice TValue="bool">
                                <Items>
                                    <RadzenRadioButtonListItem Text="YES" Value="true" />
                                    <RadzenRadioButtonListItem Text="NO" Value="false" />
                                </Items>
                            </RadzenRadioButtonList>
                        </div>
                    </div>
                }
                <div class="row" style="margin-bottom:10px;">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Satisfy all requirements :" />
                    </div>
                    <div class="col-md-6">
                        <RadzenRadioButtonList @bind-Value=@satisfaction TValue="int">
                            <Items>
                                <RadzenRadioButtonListItem Text="YES" Value="1" />
                                <RadzenRadioButtonListItem Text="NO" Value="2" />
                                <RadzenRadioButtonListItem Text="Partially" Value="3" />
                            </Items>
                        </RadzenRadioButtonList>
                    </div>
                </div>
                <hr />
                @if (!String.IsNullOrEmpty(nullableValue))
                {
                    if (documentTypes.Where(r => r.TypeCode == nullableValue).Select(n => n.TypeName).FirstOrDefault().ToLower() == "receipt")
                    {
                        <div class="row">
                            <div class="align-items-center d-flex col-md-4">
                                <RadzenLabel Text="Amount approved" />
                            </div>
                            <div class="col-md-8">
                                <RadzenLabel Text="GH¢ " />
                                <input type="number" @onchange="maxCheck" min="0" max="@maximum" step="10" @bind-value="approvedAmount"  @bind-value:event="oninput"/>
                            </div>
                        </div>
                    }
                }
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Comments : " /> <b></b>
                    </div>
                    <div class="col-md-8">
                        <RadzenTextArea @bind-Value="@approvalRemarks" Cols="50" Rows="6" Style="margin-bottom: 20px;margin-top:20px;" />
                    </div>
                </div>
            </RadzenFieldset>
        </div>
    </div>
    <center>
        @if (documents[selectedIndex].vetState.HasValue && documents[selectedIndex].vetState.Value)
        {
            <b> <RadzenLabel Text="APPROVED" Style="color:#079737;font-size: xx-large;" /> </b>
        }
        else if (documents[selectedIndex].vetState.HasValue && !documents[selectedIndex].vetState.Value)
        {
            <b> <RadzenLabel Text="DECLINED" Style="color:crimson;font-size: xx-large;" /> </b>
        }
    </center>
</div>
<div class="row">
    <div class="col-md-12">
        <center>
            <RadzenButton Click="@(() => approveDocument(documents[selectedIndex].documentGUID))" Text="Approve" Style="margin-bottom: 10px; width: 150px" />
            <RadzenButton Click="@(() => declineDocument(documents[selectedIndex].documentGUID))" Text="Decline" Style="margin-bottom: 10px; width: 150px;background-color:#dc3545;" />
        </center>
    </div>
</div>
@if (IsVisible)
{
    <div id="loading-div-background">
        <div id="loading-div" class="ui-corner-all">
            <div class="spinnermain-container">
                <SpinKitCircle />
            </div>
            <h2 style="color:#003445;font-weight:normal;">Please wait....</h2>
        </div>
    </div>}

@code {
    [Parameter]
    public List<SupportDocument> documents { get; set; }
    [Parameter]
    public SortedList<string, double> elements { get; set; }
    [Parameter]
    public List<DocumentType> documentTypes { get; set; }
    [Parameter]
    public List<DrugPrescriptionFrequency> frequencies { get; set; }
    [Parameter]
    public List<DrugRouteOfAdministration> route { get; set; }
    [Parameter]
    public List<DrugUsageForm> units { get; set; }
    [Parameter]
    public List<RefundSupportDocumentCheck> checks { get; set; }

    public string institution, documentType, documentID, amount, documentDate, recipientName, requestID, documentGUID;
    public string parseID;
    public bool singleValue;
    List<string> events = new List<string>();
    public int number;

    NotificationMessage notificationMessage = new NotificationMessage();

    public bool approved, marketPrice;
    public bool nhiscovered;
    public string approvalRemarks;
    public double approvedAmount;
    public DateTime dateOndocument;
    public AuthUser user;
    public int selectedIndex = 0;
    public decimal maximum = 0;

    protected bool IsVisible { get; set; }
    int value = 1;
    public string nullableValue;
    public int satisfaction;

    protected async override Task OnInitializedAsync()
    {
        dateOndocument = DateTime.Now;
        SpinnerService.OnShow += ShowSpinner;
        SpinnerService.OnHide += HideSpinner;
        satisfaction = 404;
        number = 0;
        string json = await sessionStorage.GetItemAsync<string>("userCred");
        if (!String.IsNullOrEmpty(json))
        {
            user = JsonConvert.DeserializeObject<AuthUser>(json);
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
        loadAI(documents[selectedIndex].documentGUID);
        maximum = decimal.Parse(documents[selectedIndex].amount.HasValue ? documents[selectedIndex].amount.Value.ToString() : "0");
    }

    public void ShowSpinner()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void HideSpinner()
    {
        IsVisible = false;
        StateHasChanged();
    }

    void loadAI(string id)
    {
        try
        {
            events.Clear();
            ShowSpinner();

            foreach (RefundSupportDocumentCheck check in checks.Where(d => d.DocumentGuid == id))
            {
                events.Add(check.Notes);
            }
            if (events.Count < 1)
                events.Add("Nothing to show at this moment");
            events.Add("Please examine the document closely by clicking on the document zoom in");

            getVetted();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        HideSpinner();
    }

    async Task ShowInlineDialog(string path) => await dialogService.OpenAsync("", ds =>
    @<div>
        <WheelZoom Image="@path" width="100%;" height="100%;" />
    </div>);

async void approveDocument(string ID)
{
  SupportDocument DD = documents[selectedIndex];
  try
  {
      VettedDocument vetted = new VettedDocument();
      vetted.VetterId = user.UserId.ToString();
      vetted.DocumentGuid = documents[selectedIndex].documentGUID;
      vetted.DocumentType = nullableValue;
      vetted.Comments = approvalRemarks;
      vetted.AmountApproved = decimal.Parse(approvedAmount.ToString());
      vetted.NhisCovered = nhiscovered;
      vetted.RequestId = requestID;
      vetted.Satisfy = satisfaction;
      vetted.ComparableMarket = marketPrice;
      vetted.DocumentDate = dateOndocument;

      DD.vetState = true;
      if (!elements.ContainsKey(ID))
      {
          number++;
          elements.Add(ID, approvedAmount);
      }
      else
      {
          elements.Remove(ID);
          elements.Add(ID, approvedAmount);
      }

      DD.vetting = vetted;

      if (selectedIndex + 1 == documents.Count)
      {
          dialogService.Close(true);
      }
      else
      {
          nextDocument();
      }

      notificationMessage.Detail = "Supporting document for " + documents.First().item + " has been successfully approved !!!";
      notificationMessage.Summary = "Document Approved";
      notificationMessage.Severity = NotificationSeverity.Success;
      notificationMessage.Duration = 5000;

      await ShowNotification(notificationMessage);
  }
  catch
  {
  }
}

async Task ShowNotification(NotificationMessage message)
{
  notificationService.Notify(message);

  await InvokeAsync(() => { StateHasChanged(); });
}

async void declineDocument(string ID)
{
  foreach (SupportDocument DD in documents.Where(d => d.documentGUID == ID))
  {
      try
      {
          VettedDocument vetted = new VettedDocument();
          vetted.VetterId = user.UserId.ToString();
          vetted.DocumentGuid = documents[selectedIndex].documentGUID;
          vetted.DocumentType = nullableValue;
          vetted.Comments = approvalRemarks;
          vetted.AmountApproved = decimal.Parse(approvedAmount.ToString());
          vetted.NhisCovered = nhiscovered;
          vetted.RequestId = requestID;
          vetted.Satisfy = satisfaction;
          vetted.ComparableMarket = marketPrice;
          vetted.DocumentDate = dateOndocument;

          DD.vetState = false;
          if (elements.ContainsKey(ID))
          {
              number++;
              elements.Remove(ID);
          }
          else if (!elements.ContainsKey(ID))
          {
              number++;
          }
          DD.vetting = vetted;
      }
      catch { }
  }
  if (selectedIndex + 1 == documents.Count)
  {
      dialogService.Close(true);
  }
  else
  {
      nextDocument();
  }

  notificationMessage.Detail = "Supporting document for " + documents.First().item + "  has been declined !!!";
  notificationMessage.Summary = "Document Declined";
  notificationMessage.Severity = NotificationSeverity.Error;
  notificationMessage.Duration = 5000;

  await ShowNotification(notificationMessage);
}

void supportChange()
{
  StateHasChanged();
}

void nextDocument()
{
  if (selectedIndex < documents.Count - 1)
  {
      selectedIndex++;

      events.Clear();
      ShowSpinner();

      documentGUID = documents[selectedIndex].documentGUID;
      requestID = documents[selectedIndex].reportID;
      parseID = documents[selectedIndex].parseID;
      maximum = decimal.Parse(documents[selectedIndex].amount.HasValue ? documents[selectedIndex].amount.Value.ToString() : "0");
      loadAI(documentGUID);

      getVetted();
      HideSpinner();

  }
}

void previousDocument()
{
  if (selectedIndex > 0)
  {
      selectedIndex--;

      events.Clear();
      ShowSpinner();

      documentGUID = documents[selectedIndex].documentGUID;
      requestID = documents[selectedIndex].reportID;
      parseID = documents[selectedIndex].parseID;
      maximum = decimal.Parse(documents[selectedIndex].amount.HasValue ? documents[selectedIndex].amount.Value.ToString() : "0");
      loadAI(documentGUID);

      getVetted();
      HideSpinner();

  }
}

void getVetted()
{
  VettedDocument d = documents.Where(r => r.documentGUID == documents[selectedIndex].documentGUID).Select(rp => rp.vetting).First();
  if (d != null)
  {
      nullableValue = d.DocumentType;
      approvedAmount = double.Parse(d.AmountApproved.Value.ToString());
      approvalRemarks = d.Comments;
      dateOndocument = d.DocumentDate.Value;
      nhiscovered = d.NhisCovered.Value;
      marketPrice = d.ComparableMarket.Value;
      satisfaction = d.Satisfy.Value;
  }
  else
  {
      satisfaction = 404;
      nullableValue = null;
      approvalRemarks = null;
      nhiscovered = false;
      dateOndocument = DateTime.Now;
      approvedAmount = 0;
      approvalRemarks = "";
      marketPrice = false;
  }
}
void maxCheck()
{
  if (approvedAmount > double.Parse(maximum.ToString()))
  {
      approvedAmount = double.Parse(maximum.ToString());
  }
  StateHasChanged();
}
void selectDocumentType()
{
  StateHasChanged();
}
async Task showTranscription()
{
  await dialogService.OpenAsync<Transcribed>($"",
               new Dictionary<string, object>() {
                      {"documentGUID", documents[selectedIndex].documentGUID},
                      {"units",units},
                      {"frequencies",frequencies},
                      {"route",route},
                                                                                                                                       },
               new DialogOptions() { Width = "1200px", Height = "780px", ShowClose = true });
}
}