@page "/processedprotests"
@inject HttpClient Http
@using BlazorTable
@using KNUST_Medical_Refund.Shared.Models
@using Protests
@inject DialogService dialogService
@using System.Globalization
@using Newtonsoft.Json;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager
@using Faso.Blazor.SpinKit
@inject SpinnerService SpinnerService

<div class="d-sm-flex justify-content-between align-items-center mb-4">
    <h3>Processed Protests</h3>
    <center>
        <RadzenDatePicker @bind-Value="selectedDate" TValue="DateTime" DateFormat="MMMM, yyyy" Change="getData" ShowTimeOkButton="true"></RadzenDatePicker>
    </center>
    <a class="btn btn-primary btn-sm d-none d-sm-inline-block" role="button" href="#" style="visibility: hidden;"><i class="fas fa-download fa-sm text-white-50"></i> Generate Report</a>
</div>
<Table TableItem="Request" Items="data" PageSize="15" ColumnReorder="true" ShowSearchBar="true">
    <Column TableItem="Request" Title="Request ID" Field="@(x => x.ReportID)" Sortable="true" Filterable="false" Width="10%" />
    <Column TableItem="Request" Title="Client Name" Field="@(x => x.claimant.Fullname)" Sortable="true" Filterable="false" Width="20%" />
    <Column TableItem="Request" Title="Amount Approved After Protest" Field="@(x => x.protested.AmountApproved)" Sortable="true" Filterable="false" Width="10%">
        <Template>
            @( FormatAsUSD(context.protested.AmountApproved))
        </Template>
    </Column>
    <Column TableItem="Request" Title="Request Date" Field="@(x => x.protested.dateprotested)" Sortable="true" Filterable="false" Width="10%">
        <Template>
            @(context.protested.dateprotested.Value.ToShortDateString())
        </Template>
    </Column>
    <Column TableItem="Request" Title="Date Processed" Field="@(x => x.protested.dateprocessed)" Sortable="true" Filterable="false" Width="10%">
        <Template>
            @(context.protested.dateprocessed.HasValue ? context.protested.dateprocessed.Value.ToShortDateString() : "")
        </Template>
    </Column>
    <Column TableItem="Request" Title="Status" Field="@(x => x.protested.open)" Sortable="true" Filterable="false" Width="5%">
        <Template>
            @if (context.protested.open.HasValue && context.protested.open.Value)
            {
                <center>Open</center>
            }
            else
            {
                <center>Closed</center>
            }
        </Template>
    </Column>

    <Column TableItem="Request" Title="Actions" Width="20%">
        <Template>
            <center>
                <RadzenButton Disabled="false" Text=@($"Review") Click="@(args => ShowReview(context))" />
            </center>
        </Template>
    </Column>
    <Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true" />
</Table>
@if (IsVisible)
{
<div id="loading-div-background">
    <div id="loading-div" class="ui-corner-all">
        <div class="spinnermain-container">
            <SpinKitCircle />
        </div>
        <h2 style="color:#003445;font-weight:normal;">Please wait....</h2>
    </div>
</div>}

@code
{
    private List<Request> data;

    public AuthUser user;
    protected bool IsVisible { get; set; }

    public DateTime selectedDate;
    protected override async Task OnInitializedAsync()
    {
        dialogService.OnOpen += Open;
        dialogService.OnClose += Close;
        SpinnerService.OnShow += ShowSpinner;
        SpinnerService.OnHide += HideSpinner;
        selectedDate = DateTime.Now;

        string json = await sessionStorage.GetItemAsync<string>("userCred");
        if (!String.IsNullOrEmpty(json))
        {
            user = JsonConvert.DeserializeObject<AuthUser>(json);
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }

        await getData();
    }

    async Task getData()
    {
        ShowSpinner();
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "api/Processedprotests/filter?month=" + selectedDate.Month + "&year=" + selectedDate.Year);

            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", user.AccessToken);

            using var httpResponse = await Http.SendAsync(request);

            data = await httpResponse.Content.ReadFromJsonAsync<List<Request>>();
        }
        catch { }
        HideSpinner();
    }


    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    public void ShowSpinner()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void HideSpinner()
    {
        IsVisible = false;
        StateHasChanged();
    }
    string FormatAsUSD(object value)
    {
        string newvalue = ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-US"));
        return "GH¢ " + newvalue.Substring(1);
    }


    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        events.Add(DateTime.Now, "Dialog opened");
        StateHasChanged();
    }

    void Close(dynamic result)
    {
        events.Add(DateTime.Now, "Dialog closed. Result: " + result);
        StateHasChanged();
    }
    void ShowReview(Request request)
    {
        dialogService.Open<ProtestReview>($"{request.claimant.Fullname}'s Protest Review",
                  new Dictionary<string, object>() { { "Requested", request
        }
                                },
                  new DialogOptions() { Width = "1000px", Height = "800px", ShowClose = true });
    }
}