@page "/pending"
@inject HttpClient Http
@using BlazorTable
@using KNUST_Medical_Refund.Shared.Models
@inject DialogService dialogService
@using System.Globalization
@using Newtonsoft.Json;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager
@using Faso.Blazor.SpinKit
@inject SpinnerService SpinnerService
@using System.Text


<div class="row" style="display:flex;justify-content:flex-start;">
    <h3>Pending Refund Requests</h3>
    @*<center>
        <RadzenDatePicker @bind-Value="selectedDate" TValue="DateTime" DateFormat="MMMM, yyyy" Change="getData" ShowTimeOkButton="true"></RadzenDatePicker>
    </center>
*@
    </div>
<div class="row d-sm-flex justify-content-between align-items-center mb-4">
    <div class="col-md-7">
        <p style="color:#003445;"> @title </p>
    </div>
    <div class="col-md-5">
        <RadzenSelectBar @bind-Value=@_singleValue TValue="bool" Change=@(args => OnChange())>
            <Items>
                <RadzenSelectBarItem Text="Pre-Processed" Value="true" />
                <RadzenSelectBarItem Text="Unprocessed" Value="false" />
            </Items>
        </RadzenSelectBar>
    </div>
</div>
<Table TableItem="Request" Items="data" PageSize="15" ColumnReorder="true" ShowSearchBar="true" >
    <Column TableItem="Request" Title="Request ID" Field="@(x => x.ReportID)" Sortable="true" Filterable="false" Width="10%" />
    <Column TableItem="Request" Title="Client Name" Field="@(x => x.claimant.Fullname)" Sortable="true" Filterable="false" Width="20%" />
    <Column TableItem="Request" Title="Requested Amount" Field="@(x => x.RequestedAmount)" Sortable="true" Filterable="false" Width="10%">
        <Template>
            @( FormatAsUSD(context.RequestedAmount))
        </Template>
    </Column>
    <Column TableItem="Request" Title="Status" Field="@(x => x.Status)" Sortable="true" Filterable="false" Width="5%" />
    <Column TableItem="Request" Title="Request Date" Field="@(x => x.Request_date)" Sortable="true" Filterable="false" Width="10%">
        <Template>
            @(context.Request_date.ToString("dd MMMM, yyyy"))
        </Template>
    </Column>
    <Column TableItem="Request" Title="Actions" Width="20%">
        <Template>
            <center>
                <RadzenButton Text=@($"Process") Click="@(args => startProcessing(context))" />
            </center>
        </Template>
    </Column>
    <Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true" />
</Table>
@if (IsVisible)
{
<div id="loading-div-background">
    <div id="loading-div" class="ui-corner-all">
        <div class="spinnermain-container">
            <SpinKitCircle />
        </div>
        <h2 style="color:#003445;font-weight:normal;">Please wait....</h2>
    </div>
</div>}

@code
{
    private List<Request> data;
    private List<Request> Preprocessed;
    private List<Request> Unprocessed;
    private List<Request> mainPending;

    public AuthUser user;
    public DateTime selectedDate;
    protected bool IsVisible { get; set; }
    private string title;
    bool singleValue = true;

    protected override async Task OnInitializedAsync()
    {
        title = "The following are pending refund requests which have been processed by the system with contents of its prescription forms transcribed by the pharmacy unit" +
                    " and are ready to be vetted";
        dialogService.OnOpen += Open;
        dialogService.OnClose += Close;
        SpinnerService.OnShow += ShowSpinner;
        SpinnerService.OnHide += HideSpinner;
        selectedDate = DateTime.Now;
        string json = await sessionStorage.GetItemAsync<string>("userCred");
        if (!String.IsNullOrEmpty(json))
        {
            user = JsonConvert.DeserializeObject<AuthUser>(json);
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }

        await getData();
    }


    public bool _singleValue
    {
        get { return singleValue; }
        set
        {
            singleValue = value;
            if (singleValue)
            {
                data = Preprocessed;
            }
            else
            {
                data = Unprocessed;
            }
            StateHasChanged();
        }
    }

    async Task getData()
    {
        ShowSpinner();
        try
        {
            //var request = new HttpRequestMessage(HttpMethod.Get, "api/requests/filter?month=" + selectedDate.Month + "&year=" + selectedDate.Year);
            var request = new HttpRequestMessage(HttpMethod.Get, "api/requests/pending");

            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", user.AccessToken);

            using var httpResponse = await Http.SendAsync(request);

            mainPending = await httpResponse.Content.ReadFromJsonAsync<List<Request>>();

            Preprocessed = mainPending.Where(r => r.preprocessedDate.HasValue).ToList();
            Unprocessed = mainPending.Where(r => !r.preprocessedDate.HasValue).ToList();

            if (singleValue)
            {
                data = Preprocessed;
            }
            else
            {
                data = Unprocessed;
            }
            StateHasChanged();
        }
        catch { }
        HideSpinner();
    }

    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    string FormatAsUSD(object value)
    {
        string newvalue = ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-US"));
        return "GH¢ " + newvalue.Substring(1);
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        StateHasChanged();
    }
    public void ShowSpinner()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void HideSpinner()
    {
        IsVisible = false;
        StateHasChanged();
    }

    void Close(dynamic result)
    {
        StateHasChanged();
    }
    async void startProcessing(Request request)
    {
        try
        {
            //   await loadAI(request);
            bool result = await dialogService.OpenAsync<Pages.Verification.Vetting>($"{request.claimant.Fullname}'s Refund Request",
                   new Dictionary<string, object>() {
                  { "Requested", request},
                                 },
                   new DialogOptions() { Width = "900px", Height = "800px", ShowClose = true });

            if (result)
            {
                data.Remove(request);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task loadAI(Request requestSub)
    {
        events.Clear();
        ShowSpinner();

        if (requestSub.RefundItems[0].parseID == null)
        {

            Request postBody = new Request();
            postBody.ReportID = requestSub.ReportID;

            var request = new HttpRequestMessage(HttpMethod.Post, "api/parsedocuments");

            request.Content = new StringContent(JsonConvert.SerializeObject(postBody), Encoding.UTF8, "application/json");

            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", user.AccessToken);
            using var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var requestSupport = new HttpRequestMessage(HttpMethod.Get, "api/SupportDocuments/" + requestSub.ReportID);
                requestSupport.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", user.AccessToken);
                using var httpResponse = await Http.SendAsync(requestSupport);
                requestSub.RefundItems = await httpResponse.Content.ReadFromJsonAsync<List<SupportDocument>>();
            }
        }
        HideSpinner();
    }
    void OnChange()
    {
        if (singleValue)
        {
            title = "The following are pending refund requests which have been processed by the system with contents of its prescription forms transcribed by the pharmacy unit" +
                    " and are ready to be vetted";
        }
        else
        {
            title = "The following are pending refund requests which have not yet been processed by the system nor transcribe by the pharmacy unit";
        }

    }
}
